В JavaScript инкапсуляция является одним из принципов объектно-ориентированного программирования (ООП),
который позволяет объединить данные (переменные) и методы (функции), связанные с ними,
в единый объект и скрыть их от внешнего доступа. Это делается для обеспечения безопасности и контроля доступа к данным и методам объекта.

В JavaScript инкапсуляция достигается с помощью приватных и публичных свойств и методов объекта.

Приватные свойства и методы обычно начинаются с префикса "_" или объявляются внутри конструктора
 или методов объекта с помощью локальных переменных. Они не могут быть доступны напрямую извне объекта.
 Вместо этого, для доступа к приватным свойствам и методам, используются публичные методы (интерфейс), которые являются частью публичного API объекта.

Пример инкапсуляции в JavaScript:
function Car(make, model) {
  // Приватные свойства
  var _make = make;
  var _model = model;

  // Приватный метод
  function startEngine() {
    console.log("Запуск двигателя");
  }

  // Публичные методы
  this.getMake = function() {
    return _make;
  };

  this.getModel = function() {
    return _model;
  };

  this.start = function() {
    startEngine();
    console.log("Машина " + _make + " " + _model + " запущена");
  };
}

var myCar = new Car("Toyota", "Camry");

console.log(myCar.getMake()); // Вывод: "Toyota"
console.log(myCar.getModel()); // Вывод: "Camry"

myCar.start(); // Вывод: "Запуск двигателя" и "Машина Toyota Camry запущена"
В этом примере свойства _make и _model являются приватными, а метод startEngine() также является приватным.
Они недоступны напрямую извне объекта Car. Вместо этого, публичные методы getMake(), getModel() и start()
предоставляют доступ к приватным свойствам и методам.

Используя инкапсуляцию, мы можем контролировать доступ к данным и методам объекта, что повышает безопасность,
предотвращает нежелательные изменения и упрощает сопровождение кода.